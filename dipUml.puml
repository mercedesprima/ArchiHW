@startuml
'Dependency Inversion Principle (DIP): Реализовать обратные зависимости — высокоуровневые модули не должны зависеть от низкоуровневых.'
' Классы `Report` и `PrintReport` - модули нижнего уровня. `Report` содержит список элементов `ReportItem` и использует
' `Reportable` для вывода отчета. `PrintReport` реализует `Reportable` и предоставляет конкретную реализацию метода `output`.
' Интерфейс `Reportable` представляет абстракцию для вывода отчета. Он объявляет метод `output`, которым пользуется
' класс `Report`, что позволяет классу `Report` зависеть от абстракции, а не от конкретной реализации.

' Модуль верхнего уровня - класс `Main`, представляющий точку входа в приложение, не зависит от конкретных реализаций
' (модули нижнего уровня `Report` и `PrintReport`), а зависит от абстракции `Reportable`.

class lesson3.dip.Main {
+ {static} void main(String[])
}
class lesson3.dip.Report {
- List<ReportItem> items
- Reportable reportable
+ void calculate()
+ void output()
}
class lesson3.dip.ReportItem {
- String description
- float amount
+ String getDescription()
+ float getAmount()
}
interface lesson3.dip.Reportable {
~ void output(List<ReportItem>)
}
class lesson3.dip.PrintReport {
+ void output(List<ReportItem>)
}
lesson3.dip.Main --> lesson3.dip.Report: creates
lesson3.dip.Report *-- lesson3.dip.ReportItem : contains
lesson3.dip.Report --> lesson3.dip.Reportable: uses
lesson3.dip.Reportable <|.. lesson3.dip.PrintReport
@enduml