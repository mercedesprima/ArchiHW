@startuml
' Open/Closed Principle (OCP): Расширяемые, но закрытые для модификации компоненты. Так, интерфейс `Shape` объявляет
' абстрактный метод `area()`, который определяет вычисление площади для любой фигуры. Это создает абстракцию, которая
' позволяет работать с различными типами фигур, независимо от их конкретных реализаций.
' Классы `Square`, `Rectangle`, `RightTriangle` реализуют интерфейс `Shape` и предоставляют свою собственную
' реализацию метода `area()`. Это позволяет добавить новые фигуры, реализующие интерфейс `Shape`, без изменения кода,
' который уже использует `Shape`.
' Класс `Main` использует интерфейс `Shape` для создания объектов `Square` и `RightTriangle` и вызывает их методы `area()`
' для получения площади фигур. Это показывает, что `Main` зависит только от абстракции `Shape`, а не от конкретных классов.
class lesson3.ocp.Square {
- int side
+ double area()
}
interface lesson3.ocp.Shape {
~ double area()
}
class lesson3.ocp.RightTriangle {
- int side1
- int side2
- double hypotenuse
+ double area()
}
class lesson3.ocp.Rectangle {
- int side1
- int side2
+ double area()
}
class lesson3.ocp.Main {
+ {static} void main(String[])
}


lesson3.ocp.Shape <|.. lesson3.ocp.Square
lesson3.ocp.Shape <|.. lesson3.ocp.RightTriangle
lesson3.ocp.Shape <|.. lesson3.ocp.Rectangle
lesson3.ocp.Main --> lesson3.ocp.Square : creates
lesson3.ocp.Main --> lesson3.ocp.RightTriangle : creates
lesson3.ocp.Main --> lesson3.ocp.Rectangle : creates

@enduml